{"version":3,"sources":["mst/rootStoreContext.ts","components/main.tsx","components/stationInfo.tsx","mst/index.ts","mst/setup.ts","context/bikeStationUpdateProvider.tsx","App.tsx","index.tsx","components/stationInfo.module.scss","App.module.scss"],"names":["defaultObj","RootStoreContext","createContext","RootStoreProvider","Provider","useStores","store","useContext","Error","Main","observer","stations","useState","redirectTo","setRedirectTo","to","className","styles","container","style","color","textAlign","Autocomplete","disablePortal","onChange","e","target","textContent","id","options","map","x","name","filter","value","index","self","indexOf","sx","width","background","renderInput","params","TextField","label","StationInfo","station","setStation","favorite","setFavorite","addFavorite","delFavorite","getSnapshot","snap","setSnap","onSnapshot","newSnapshot","stationReq","useParams","stationName","useEffect","console","info","favorites","currentSation","find","inFavs","favoriteName","onClick","handleFavorite","size","bikesAvailable","active","StationModel","t","model","string","lat","number","lon","spacesAvailable","boolean","FavoriteModel","bikeRentalStations","array","maybe","RootStoreModel","actions","push","log","replace","fetchStationDataAsync","flow","fetch","method","headers","response","text","dataText","data","JSON","parse","ok","error","STORAGE_KEY","BikeStationUpdateProvider","children","intervall","setInterval","clearInterval","App","rootTree","setRootTree","storeProcessor","types","snapshotProcessor","postProcessor","copy","Stations","localStorage","getItem","create","snapshot","setItem","stringify","setupRootStore","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.bf9b40dc.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\"\nimport { RootStore } from \"../mst\"\n\n// This is an dummy object instantiated only for detecting when provider is missing.\n// In this approach we are basically forbidding usage of default values in this context,\n// which seems to line up quite well with most real-life scnearios for application state management.\n// For default values for the stores, that should be done at the provider (app.tsx).\nconst defaultObj: any = {}\nconst RootStoreContext = createContext<RootStore>(defaultObj) \n\nexport const RootStoreProvider = RootStoreContext.Provider\n\nexport const useStores = () => {\n  const store = useContext(RootStoreContext)\n  if(store === defaultObj) {\n    throw new Error(\"RootStore Consumer present without provider! This likely implies mistake in code, make sure that you have provider somewhere lower in the component tree (usually at or near app.tsx).\")\n  }\n  return store\n}\n","import { Autocomplete, TextField } from '@mui/material';\nimport React, { useState } from 'react';\nimport styles from './main.module.scss';\nimport { observer } from 'mobx-react-lite';\nimport { useStores } from '../mst/rootStoreContext';\nimport { Redirect } from 'react-router';\n\nconst Main: React.FC = observer(() => {\n  const { stations} = useStores();\n  const [redirectTo, setRedirectTo] = useState<string>();\n\n  if (redirectTo) return <Redirect to={`station/${redirectTo}`} />\n\n  const onlyUnique = (value:any, index:any, self: any) => {\n    return self.indexOf(value) === index;\n  }\n\n  return (\n    <div className={styles.container}>\n      <h1 style={{color:'azure', textAlign:'center'}}>Kaupunkifillarit</h1>\n      <Autocomplete\n        disablePortal\n        onChange={(e:any) => setRedirectTo(e.target.textContent)}\n        id=\"combo-box-demo\"\n        options={stations.map(x => x.name).filter(onlyUnique)}\n        sx={{ width: 300, background:'azure' }}\n        renderInput={(params) => <TextField {...params} label=\"Valitse polkupyöräasema\" />}\n      />\n    </div>\n  )\n})\n\nexport default Main;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from \"react-router-dom\";\nimport styles from './stationInfo.module.scss';\nimport { observer } from 'mobx-react-lite';\nimport { useStores } from '../mst/rootStoreContext';\nimport { RootStoreSnapshot, Station } from '../mst';\nimport { getSnapshot, onSnapshot } from 'mobx-state-tree';\nimport { AiOutlineStar, AiTwotoneStar } from 'react-icons/ai';\n\nconst StationInfo: React.FC = observer(() => {\n  const [station, setStation] = useState<Station>();\n  const [favorite, setFavorite] = useState<boolean>(false);\n  \n  const { addFavorite, delFavorite } = useStores();\n\n  const [snap, setSnap] = useState<RootStoreSnapshot>(getSnapshot(useStores()));\n  onSnapshot(useStores(), (newSnapshot) => setSnap(newSnapshot));\n\n  const params = useParams<any>();\n  const stationReq: string = params.stationName;\n\n  useEffect(() => {\n    console.info('stationInfo ue running ...')\n    console.info(snap.favorites)\n    const currentSation = snap.stations.find(x => x.name === stationReq);\n    setStation(currentSation);\n\n    if (!station) return;\n    const inFavs = snap.favorites.find(x => x.favoriteName === station.name);\n    setFavorite(!!inFavs);\n    \n  }, [snap.favorites, snap.stations, station, stationReq]);\n\n  const handleFavorite = () => {\n    if (!station) return;\n    const inFavs = snap.favorites.find(x => x.favoriteName === station.name);\n    setFavorite(!inFavs);\n    inFavs ? delFavorite(station.name) : addFavorite(station.name);\n  }\n\n  return station\n  ? (\n      <div className={styles.container}>\n        <h1 style={{color: 'azure'}}>{station.name}</h1>\n\n        <i onClick={() => handleFavorite()}>\n          {\n            favorite\n              ? <AiTwotoneStar size='28' color='yellow' />\n              : <AiOutlineStar size='28'/>\n          }\n        </i>\n\n        <p\n          style={\n            station.bikesAvailable < 1\n            ? {color: 'red'}\n            : {color: 'snow'}\n          }\n        >\n          Fillareita vapaana {station.bikesAvailable}\n           {/* / {station.spacesAvailable} */}\n        </p>\n        <p style={station.active ? {color: 'greenyellow'} : {color:'red'}}>Asema {station.active ? 'on käytössä': 'ei ole käytössä'}</p>\n        <button>\n          <Link to='/'> Valitse toinen asema </Link>\n        </button>\n      </div>\n    )\n  : (\n      <div>\n        <p>NO_DATA</p>\n      </div>\n    )\n})\n\nexport default StationInfo;\n","import {\n  Instance,\n  SnapshotOut,\n  types as t,\n  flow\n} from 'mobx-state-tree';\n\nexport const StationModel = t.model('Station', {\n  id: t.string,\n  lat: t.number,\n  lon: t.number,\n  name: t.string,\n  bikesAvailable: t.number,\n  spacesAvailable: t.number,\n  active: t.boolean,\n});\n\nexport const StationsModel = t.model('Stations', {\n  bikeRentalStations: t.array(StationModel),\n})\n\nexport const FavoriteModel = t.model('Favorite', {\n  favoriteName: t.maybe(t.string),// t.string,\n});\n\n// export const FavoritesModel = t.model('Favorites', {\n//   favorites: t.array(FavoriteModel),\n// })\n\nexport const RootStoreModel = t\n  .model('Root', {\n    stations: t.array(StationModel),\n    favorites: t.array(FavoriteModel),\n  })\n  .actions(self => ({\n    addFavorite(stationName: string) {\n      const exists = self.favorites.find(x => x.favoriteName === stationName);\n      if (exists) {\n        console.info(stationName, 'is allready in favorites');\n        return;\n      }\n      self.favorites.push({favoriteName: stationName});\n      console.log('favorite added')\n    },\n    delFavorite(stationName: string) {\n      const exists = self.favorites.find(x => x.favoriteName === stationName);\n      if (!exists) {\n        console.info(stationName, 'is not part of favoritelist');\n        return;\n      }\n      self.favorites.replace(self.favorites.filter(x => x.favoriteName !== stationName));\n      console.log('favorite deleted')\n    },\n    fetchStationDataAsync: flow(function* () {\n      try {\n        const response: Response = yield fetch('https://us-central1-kaupunkifillarit-aed04.cloudfunctions.net/api/getStations', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          }\n        });\n        const dataText = yield response.text();\n        const data: Stations = JSON.parse(dataText);\n        if (response.ok) {\n          self.stations.replace(data.bikeRentalStations);\n          return;\n        }\n        console.error('NOTHING TO FETCH');\n      } catch (err) {\n        console.error('MST:', err);\n      }\n    })\n  }));\n\n// export interface Favorites extends Instance<typeof FavoritesModel> { };\n// export interface FavoritesModelSnapshot extends SnapshotOut<typeof FavoritesModel> { };\n\nexport interface Favorite extends Instance<typeof FavoriteModel> { };\nexport interface FavoriteModelSnapshot extends SnapshotOut<typeof FavoriteModel> { };\n\nexport interface Station extends Instance<typeof StationModel> { };\nexport interface StationSnapshot extends SnapshotOut<typeof StationModel> { };\n\nexport interface Stations extends Instance<typeof StationsModel> { };\nexport interface StationSnapshot extends SnapshotOut<typeof StationsModel> { };\n\nexport interface RootStore extends Instance<typeof RootStoreModel> { };\nexport interface RootStoreSnapshot extends SnapshotOut<typeof RootStoreModel> { };\n","import { onSnapshot, types } from \"mobx-state-tree\";\nimport { RootStore, RootStoreModel } from \".\";\n\nconst STORAGE_KEY = 'ROOT_STORE';\n\nexport const setupRootStore = () => {\n  let store: RootStore;\n  let data: any;\n\n  const storeProcessor = types.snapshotProcessor(RootStoreModel, {\n    postProcessor: x => {\n      const copy = {...x} as any;\n      delete copy.Stations\n      return copy;\n    },\n  });\n\n  try {\n    data = JSON.parse(localStorage.getItem(STORAGE_KEY) ?? '{}');\n    store = storeProcessor.create(data);\n  } catch (error) {\n    console.error('MST ERROR:', error)\n    store = storeProcessor.create();\n  }\n\n  onSnapshot(store, snapshot => localStorage.setItem(STORAGE_KEY, JSON.stringify(snapshot)));\n  return store;\n}","import React, { useEffect } from 'react';\nimport { useStores } from '../mst/rootStoreContext';\n\nconst BikeStationUpdateProvider: React.FC = ({children}) => {\n\n  const { fetchStationDataAsync } = useStores();\n  \n  useEffect(() => {\n    console.log('USEEFFECT')\n    fetchStationDataAsync();\n    const intervall = setInterval(() => {\n      console.info('Updating data...');\n      fetchStationDataAsync();\n    }, 60000);\n    return () => clearInterval(intervall);    \n  }, [fetchStationDataAsync]);\n\n  return (\n    <div>\n      {children}\n    </div>\n  )\n}\n\nexport default BikeStationUpdateProvider;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Main from './components/main';\nimport StationInfo from './components/stationInfo';\nimport styles from './App.module.scss';\nimport { RootStore } from './mst';\nimport { setupRootStore } from './mst/setup';\nimport { RootStoreProvider } from './mst/rootStoreContext';\nimport BikeStationUpdateProvider from './context/bikeStationUpdateProvider';\n\nconst App: React.FC = () => {\n  const [rootTree, setRootTree] = useState<RootStore|undefined>();\n  useEffect(() => {\n    setRootTree(setupRootStore());\n  }, []);\n\n  if (!rootTree) return null; //activityindicator;\n\n  return (\n    <RootStoreProvider value={rootTree}>\n      <BikeStationUpdateProvider>\n        <div className={styles.container}>\n          <Switch>\n            <Route exact path='/' component={Main} />\n            <Route exact path='/station/:stationName' component={StationInfo} />\n          </Switch>\n        </div>\n      </BikeStationUpdateProvider>\n    </RootStoreProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"stationInfo_container__3H6VT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};"],"sourceRoot":""}