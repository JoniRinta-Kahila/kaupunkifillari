{"version":3,"sources":["App.module.scss","firebase/firebaseService.ts","mst/rootStoreContext.ts","components/favorites.tsx","components/search.tsx","components/main.tsx","components/stationInfo.tsx","mst/index.ts","mst/setup.ts","context/bikeStationUpdateProvider.tsx","App.tsx","index.tsx","components/stationInfo.module.scss"],"names":["module","exports","firebaseInstance","defaultObj","RootStoreContext","createContext","RootStoreProvider","Provider","useStores","store","useContext","Error","Favorites","useState","favs","setFavs","getSnapshot","snap","setSnap","onSnapshot","newSnapshot","useEffect","favoriteStations","stations","filter","s","fav","favorites","find","f","name","length","style","display","flexDirection","flexWrap","width","margin","map","x","background","padding","borderRadius","color","textDecoration","fontSize","to","id","bikesAvailable","Search","observer","displayHeader","redirectTo","setRedirectTo","className","styles","container","textAlign","Autocomplete","renderOption","props","option","asd","key","disablePortal","onChange","e","a","getOptionLabel","options","value","index","self","indexOf","sx","renderInput","params","TextField","label","Main","StationInfo","station","setStation","favorite","setFavorite","addFavorite","delFavorite","stationReq","useParams","stationId","currentSation","inFavs","ActionItem","justifyContent","alignItems","onClick","handleFavorite","size","active","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","FirebaseServices","getFunctionsInstance","appCheckInstance","initializeApp","initializeAppCheck","provider","ReCaptchaV3Provider","isTokenAutoRefreshEnabled","getFunctions","app","StationModel","t","model","string","lat","number","lon","spacesAvailable","boolean","RootStoreModel","bikeRentalStations","array","actions","console","info","push","replace","fetchStationDataAsync","flow","functionsInstance","action","functions","timeout","data","then","result","log","STORAGE_KEY","BikeStationUpdateProvider","updateFrequency","children","intervall","setInterval","clearInterval","App","rootTree","setRootTree","storeProcessor","types","snapshotProcessor","postProcessor","copy","Stations","JSON","parse","localStorage","getItem","create","error","snapshot","setItem","stringify","setupRootStore","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a166581a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\"};","import { FirebaseApp, initializeApp } from 'firebase/app';\nimport { initializeAppCheck, ReCaptchaV3Provider } from 'firebase/app-check';\nimport { getFunctions } from '@firebase/functions';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA0zZzBan7E3YmvAon4l4h7ZOA9hamvlHE\",\n  authDomain: \"kaupunkifillarit-aed04.firebaseapp.com\",\n  projectId: \"kaupunkifillarit-aed04\",\n  storageBucket: \"kaupunkifillarit-aed04.appspot.com\",\n  messagingSenderId: \"746873844238\",\n  appId: \"1:746873844238:web:33ffbe49354f2cb420825f\",\n  measurementId: \"G-S8P5Z3F6S5\"\n};\n\nlet firebaseInstance: FirebaseApp;\n\nconst InitializeAppCheck = () => {\n  if (!firebaseInstance) firebaseInstance = initializeApp(firebaseConfig);\n\n  return initializeAppCheck(firebaseInstance, {\n    provider: new ReCaptchaV3Provider('6LdyvQYdAAAAAKZD7R1vWhl5PrCyfhHS4zaa6dii'),\n    isTokenAutoRefreshEnabled: true,\n  });\n};\n\nconst GetFunctionsInstance = () => {\n  const appCheckInstance = InitializeAppCheck();\n  return getFunctions(appCheckInstance.app);\n};\n\nconst FirebaseServices = {\n  getFunctionsInstance: GetFunctionsInstance,\n}\n\nexport default FirebaseServices;\n","import { createContext, useContext } from \"react\"\nimport { RootStore } from \"../mst\"\n\n// This is an dummy object instantiated only for detecting when provider is missing.\n// In this approach we are basically forbidding usage of default values in this context,\n// which seems to line up quite well with most real-life scnearios for application state management.\n// For default values for the stores, that should be done at the provider (app.tsx).\nconst defaultObj: any = {}\nconst RootStoreContext = createContext<RootStore>(defaultObj) \n\nexport const RootStoreProvider = RootStoreContext.Provider\n\nexport const useStores = () => {\n  const store = useContext(RootStoreContext)\n  if(store === defaultObj) {\n    throw new Error(\"RootStore Consumer present without provider! This likely implies mistake in code, make sure that you have provider somewhere lower in the component tree (usually at or near app.tsx).\")\n  }\n  return store\n}\n","import React, { useEffect, useState } from 'react';\nimport { RootStoreSnapshot, Station } from '../mst';\nimport { getSnapshot, onSnapshot } from 'mobx-state-tree';\nimport { useStores } from '../mst/rootStoreContext';\nimport { Link, Redirect } from 'react-router-dom';\n\ntype FavoritesProps = {\n\n}\n\nconst Favorites: React.FC<FavoritesProps> = () => {\n  const [favs, setFavs] = useState<Station[]>([]);\n  const [snap, setSnap] = useState<RootStoreSnapshot>(getSnapshot(useStores()));\n  onSnapshot(useStores(), (newSnapshot) => setSnap(newSnapshot));\n\n  useEffect(() => {\n\n    const favoriteStations = snap.stations.filter(s => {\n      const fav = snap.favorites.find(f => f.name === s.name);\n      return s.name === fav?.name\n    });\n    setFavs(favoriteStations);\n  }, [snap]);\n\n\n\n  return snap.favorites.length > 1 ? (\n    <div style={{display:'flex', flexDirection:'row', flexWrap:'wrap', width:'300px', margin:'8px'}}>\n      {\n        favs.map(x => {\n          return (\n            <div style={{background: 'azure', width:'fit-content', padding:'3px 5px', borderRadius:'5px', margin:'5px'}}>\n              <Link style={{color:'black', textDecoration:'none', fontSize:'20px'}} to={`station/${x.id}`}>{`${x.name}: ${x.bikesAvailable}`}</Link>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n  : snap.favorites.length === 1 ? <Redirect to={`station/${snap.favorites[0].id}`}/> : null\n}\n\nexport default Favorites;\n","import { Autocomplete, TextField } from '@mui/material';\nimport React, { useState } from 'react';\nimport styles from './search.module.scss';\nimport { observer } from 'mobx-react-lite';\nimport { useStores } from '../mst/rootStoreContext';\nimport { Redirect } from 'react-router';\n\ntype SearchProps = {\n  displayHeader?: boolean,\n}\n\nconst Search: React.FC<SearchProps> = observer(({displayHeader = true}) => {\n  const { stations } = useStores();\n  const [redirectTo, setRedirectTo] = useState<string>();\n\n  if (redirectTo) return <Redirect to={`/station/${redirectTo}`} />\n\n  const onlyUnique = (value:any, index:any, self: any) => {\n    return self.indexOf(value) === index;\n  }\n\n  return (\n    <div className={styles.container}>\n\n      {\n        displayHeader\n        ? <h1 style={{color:'azure', textAlign:'center'}}>Kaupunkifillarit</h1>\n        : null\n      }\n      <Autocomplete\n        renderOption={(props, option, asd) => {\n          return (\n            <li {...props} key={option.id}>\n              {option.name}\n            </li>\n          )\n        }}\n        disablePortal\n        onChange={(e, a) => setRedirectTo(a?.id)}\n        getOptionLabel={(option) => option.name}\n        id=\"combo-box-demo\"\n        // options={stations.map(x => x.name).filter(onlyUnique)}\n        options={stations.map(x => x).filter(onlyUnique)}\n        sx={{ width: 300, background:'azure' }}\n        renderInput={(params) => <TextField {...params} label=\"Valitse polkupyöräasema\" />}\n      />\n    </div>\n  )\n})\n\nexport default Search;\n","import React from 'react';\nimport Favorites from './favorites';\nimport Search from './search';\n\ntype MainProps = {\n\n}\n\nconst Main: React.FC<MainProps> = () => {\n  return (\n    <div>\n      <Search />\n      <Favorites />\n    </div>\n  )\n}\n\nexport default Main;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from \"react-router-dom\";\nimport styles from './stationInfo.module.scss';\nimport { observer } from 'mobx-react-lite';\nimport { useStores } from '../mst/rootStoreContext';\nimport { RootStoreSnapshot, Station } from '../mst';\nimport { getSnapshot, onSnapshot } from 'mobx-state-tree';\nimport { AiOutlineStar, AiTwotoneStar } from 'react-icons/ai';\nimport Search from './search';\n\nconst StationInfo: React.FC = observer(() => {\n  const [station, setStation] = useState<Station>();\n  const [favorite, setFavorite] = useState<boolean>(false);\n  \n  const { addFavorite, delFavorite } = useStores();\n\n  const [snap, setSnap] = useState<RootStoreSnapshot>(getSnapshot(useStores()));\n  onSnapshot(useStores(), (newSnapshot) => setSnap(newSnapshot));\n\n  const params = useParams<any>();\n  const stationReq: string = params.stationId;\n\n  useEffect(() => {\n    const currentSation = snap.stations.find(x => x.id === stationReq);\n    setStation(currentSation);\n\n    if (!station) return;\n    const inFavs = snap.favorites.find(x => x.name === station.name);\n    setFavorite(!!inFavs);\n    \n  }, [snap.favorites, snap.stations, station, stationReq]);\n\n  const handleFavorite = () => {\n    if (!station) return;\n    const inFavs = snap.favorites.find(x => x.name === station.name);\n    setFavorite(!inFavs);\n    inFavs ? delFavorite(station) : addFavorite(station);\n  }\n\n  const ActionItem = () => {\n    return snap.favorites.length < 2\n    ? (\n      <Search displayHeader={false} />\n    )\n    : <button><Link to='/'>Valitse toinen asemat</Link></button>\n  }\n\n  return station\n  ? (\n      <div className={styles.container}>\n        <span style={{display:'flex', flexDirection:'row', justifyContent:'center', alignItems:'center'}}>\n          <h1 style={{color: 'azure'}}>{station.name}</h1>\n          <i onClick={() => handleFavorite()}>\n            {\n              favorite\n                ? <AiTwotoneStar size='32' color='yellow' />\n                : <AiOutlineStar size='32'/>\n            }\n          </i>\n        </span>\n\n        <div>\n          <p\n            style={\n              station.bikesAvailable < 1\n              ? {color: 'red'}\n              : {color: 'snow'}\n            }\n          >\n            Fillareita vapaana {station.bikesAvailable}\n            {/* / {station.spacesAvailable} */}\n          </p>\n          <p style={station.active ? {color: 'greenyellow'} : {color:'red'}}>Asema {station.active ? 'on käytössä': 'ei ole käytössä'}</p>\n\n          {/* Search bar OR btn back */}\n          <ActionItem />\n        </div>\n      </div>\n    )\n  : (\n      <div>\n        <p>NO_DATA</p>\n      </div>\n    )\n})\n\nexport default StationInfo;\n","import {\n  Instance,\n  SnapshotOut,\n  types as t,\n  flow\n} from 'mobx-state-tree';\nimport * as functions from 'firebase/functions';\nimport FirebaseServices from '../firebase/firebaseService';\n\nexport const StationModel = t.model('Station', {\n  id: t.string,\n  lat: t.number,\n  lon: t.number,\n  name: t.string,\n  bikesAvailable: t.number,\n  spacesAvailable: t.number,\n  active: t.boolean,\n});\n\nexport const StationsModel = t.model('Stations', {\n  bikeRentalStations: t.array(StationModel),\n});\n\nexport const RootStoreModel = t\n  .model('Root', {\n    stations: t.array(StationModel),\n    favorites: t.array(StationModel),\n  })\n  .actions(self => ({\n    addFavorite(station: Station) {\n      const exists = self.favorites.find(x => x.name === station.name);\n      if (exists) {\n        console.info(station.name, 'is allready in favorites');\n        return;\n      }\n      self.favorites.push(station);\n    },\n    delFavorite(station: Station) {\n      const exists = self.favorites.find(x => x.name === station.name);\n      if (!exists) {\n        console.info(station.name, 'is not part of favoritelist');\n        return;\n      }\n      self.favorites.replace(self.favorites.filter(x => x.name !== station.name));\n    },\n    fetchStationDataAsync: flow(function* () {\n      const functionsInstance = FirebaseServices.getFunctionsInstance();\n      const action: () => Promise<functions.HttpsCallableResult<Stations>> = functions.httpsCallable(functionsInstance, '', {timeout: 70000});\n      const data = action()\n        .then(data => data);\n      const result = (yield data).data;\n      console.log(result)\n      self.stations.replace(result.bikeRentalStations);\n      // try {\n      //   const response: Response = yield fetch('https://us-central1-kaupunkifillarit-aed04.cloudfunctions.net/getStationsData', {\n      //     method: 'POST',\n      //     headers: {\n      //       'Content-Type': 'application/json',\n      //     },\n      //     body: JSON.stringify({data:{}}),\n      //   });\n      //   const dataText = yield response.text();\n      //   const data: Stations = JSON.parse(dataText);\n      //   if (response.ok) {\n      //     self.stations.replace(data.bikeRentalStations);\n      //     return;\n      //   }\n      //   console.error('NOTHING TO FETCH');\n      // } catch (err) {\n      //   console.error('MST:', err);\n      // }\n    })\n  }));\n\nexport interface Station extends Instance<typeof StationModel> { };\nexport interface StationSnapshot extends SnapshotOut<typeof StationModel> { };\n\nexport interface Stations extends Instance<typeof StationsModel> { };\nexport interface StationSnapshot extends SnapshotOut<typeof StationsModel> { };\n\nexport interface RootStore extends Instance<typeof RootStoreModel> { };\nexport interface RootStoreSnapshot extends SnapshotOut<typeof RootStoreModel> { };\n","import { onSnapshot, types } from \"mobx-state-tree\";\nimport { RootStore, RootStoreModel } from \".\";\n\nconst STORAGE_KEY = 'ROOT_STORE';\n\nexport const setupRootStore = () => {\n  let store: RootStore;\n  let data: any;\n\n  const storeProcessor = types.snapshotProcessor(RootStoreModel, {\n    postProcessor: x => {\n      const copy = {...x} as any;\n      delete copy.Stations\n      return copy;\n    },\n  });\n\n  try {\n    data = JSON.parse(localStorage.getItem(STORAGE_KEY) ?? '{}');\n    store = storeProcessor.create(data);\n  } catch (error) {\n    console.error('MST ERROR:', error)\n    store = storeProcessor.create();\n  }\n\n  onSnapshot(store, snapshot => localStorage.setItem(STORAGE_KEY, JSON.stringify(snapshot)));\n  return store;\n}","import React, { useEffect } from 'react';\nimport { useStores } from '../mst/rootStoreContext';\n\ntype BikeStationUpdateProviderProps = {\n  updateFrequency?: number, // ms\n}\n\nconst BikeStationUpdateProvider: React.FC<BikeStationUpdateProviderProps> = ({updateFrequency = 120000, children}) => {\n\n  const { fetchStationDataAsync } = useStores();\n  \n  useEffect(() => {\n    // console.log('USEEFFECT')\n    fetchStationDataAsync();\n    const intervall = setInterval(() => {\n      console.info('Updating data...');\n      fetchStationDataAsync();\n    }, updateFrequency);\n    return () => clearInterval(intervall);    \n  }, [fetchStationDataAsync, updateFrequency]);\n\n  return (\n    <div>\n      {children}\n    </div>\n  )\n}\n\nexport default BikeStationUpdateProvider;\n","import React, { useEffect, useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Main from './components/main';\nimport StationInfo from './components/stationInfo';\nimport styles from './App.module.scss';\nimport { RootStore } from './mst';\nimport { setupRootStore } from './mst/setup';\nimport { RootStoreProvider } from './mst/rootStoreContext';\nimport BikeStationUpdateProvider from './context/bikeStationUpdateProvider';\nimport Search from './components/search';\n\nconst App: React.FC = () => {\n  const [rootTree, setRootTree] = useState<RootStore|undefined>();\n  useEffect(() => {\n    setRootTree(setupRootStore());\n  }, []);\n\n  if (!rootTree) return null; //activityindicator;\n\n  return (\n    <RootStoreProvider value={rootTree}>\n      <BikeStationUpdateProvider>\n        <div className={styles.container}>\n          <Switch>\n            <Route exact path='/' component={Main} />\n            <Route exact path='/search' component ={Search} />\n            <Route exact path='/station/:stationId' component={StationInfo} />\n          </Switch>\n        </div>\n      </BikeStationUpdateProvider>\n    </RootStoreProvider>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"stationInfo_container__3H6VT\"};"],"sourceRoot":""}